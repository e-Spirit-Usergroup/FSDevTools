/*
 *
 * *********************************************************************
 * fsdevtools
 * %%
 * Copyright (C) 2020 e-Spirit AG
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * *********************************************************************
 *
 */

import com.espirit.moddev.build.BuildUtils

plugins {
    id 'idea'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources {
            srcDir file('src/integrationTest/resources')
        }
    }
}

idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testResourceDirs += file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

processResources {
    outputs.upToDateWhen { false }
    expand(project.properties)
}

project.afterEvaluate {
    BuildUtils.disablePublishing(project);
}

if (rootProject.ext.useArtifactory) {
    task javaIntegrationTest(type: Test) {
        group 'verification'
        dependsOn(assemble)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        ///////////////////////////////////////////////////////
        // set system property for integration tests
        ///////////////////////////////////////////////////////

        systemProperty("testHttpPort", String.valueOf(serverHttpPort))
        systemProperty("testSocketPort", String.valueOf(serverSocketPort))
        systemProperty("testLicenseFile", String.valueOf(rootProject.configurations.fsLicense.resolve().first().absolutePath))
        systemProperty("testInstallerTar", String.valueOf(rootProject.configurations.testInstallerTar.resolve().first().absolutePath))
        systemProperty("testServerJar", String.valueOf(rootProject.configurations.testServerJar.resolve().first().absolutePath))
        systemProperty("testRuntimeJar", String.valueOf(rootProject.configurations.testRuntimeJar.resolve().first().absolutePath))
    }

    task integrationTest() {
        group 'verification'
        dependsOn(javaIntegrationTest)
        mustRunAfter rootProject.allprojects*.getTasksByName('test', false)
    }

    if (System.getProperty("isCI") != null) {
        check.dependsOn(integrationTest)
    }

    test {
        systemProperty("fsLicenseFile", String.valueOf(rootProject.configurations.fsLicense.resolve().first().absolutePath))
    }
}

dependencies {
    compile project(":fsdevtools-cli-api")
    compile project(":fsdevtools-common")
    compile project(":fsdevtools-commands")
    compile project(":fsdevtools-serverrunner")
    compile project(":fsdevtools-sharedutils")

    compile "io.github.classgraph:classgraph:${classGraphVersion}"

    // logging
    compile "log4j:log4j:${log4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4japiVersion}"
    compile "org.slf4j:jcl-over-slf4j:${slf4japiVersion}"
    compile "org.slf4j:jul-to-slf4j:${slf4japiVersion}"

    testCompile 'com.github.stefanbirkner:system-rules:1.14.0'
    testCompile project(":fsdevtools-commands:custom-command-example")
}
